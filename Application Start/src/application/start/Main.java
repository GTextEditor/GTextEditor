/*
 * Copyright (C) 2017 broke
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package application.start;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author broke
 */
public class Main extends javax.swing.JFrame {

    static java.util.ArrayList<String> filePaths = new java.util.ArrayList();

    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        saveChooser = new javax.swing.JFileChooser();
        openChooser = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        openBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        newBtn = new javax.swing.JButton();
        editTabs = new javax.swing.JTabbedPane();
        closeBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        newMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Text Editor");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        setSize(new java.awt.Dimension(0, 0));

        jToolBar1.setRollover(true);

        openBtn.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        openBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/open-folder-outline-24x24.png"))); // NOI18N
        openBtn.setText("Open");
        openBtn.setToolTipText("Open File (Ctrl+O)");
        openBtn.setFocusable(false);
        openBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(openBtn);

        saveBtn.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save-file-option-24x24-blue.png"))); // NOI18N
        saveBtn.setText("Save");
        saveBtn.setToolTipText("Save File (Ctrl+S)");
        saveBtn.setFocusable(false);
        saveBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(saveBtn);

        newBtn.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        newBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/new-document-24x24.png"))); // NOI18N
        newBtn.setText("New File");
        newBtn.setToolTipText("New File (Ctrl+N)");
        newBtn.setFocusable(false);
        newBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(newBtn);

        closeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cross-mark-on-a-red-circle-background-16x16.png"))); // NOI18N
        closeBtn.setToolTipText("Close Selected Tab");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        openMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/open-folder-outline.png"))); // NOI18N
        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        jMenu1.add(openMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        saveMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save-file-option.png"))); // NOI18N
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        saveMenu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveMenuKeyPressed(evt);
            }
        });
        jMenu1.add(saveMenu);

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/new-document-16x16.png"))); // NOI18N
        newMenu.setText("New File");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        jMenu1.add(newMenu);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(editTabs)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {                                         
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        openChooser.setFileFilter(filter);
        openChooser.showOpenDialog(saveBtn);
        if (openChooser.getSelectedFile() == null)
            return;
        String text = "";
        try {
            for (String line : Files.readAllLines(Paths.get(openChooser.getSelectedFile().getPath()))) {
                text += line + "\n";
            }
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        filePaths.add(openChooser.getSelectedFile().getPath());
        javax.swing.JTextArea newTextArea = new javax.swing.JTextArea(text);
        newTextArea.setAutoscrolls(true);
        newTextArea.setLineWrap(true);
        editTabs.addTab(openChooser.getSelectedFile().getName(), newTextArea);
    }                                        

    private void saveMenuKeyPressed(java.awt.event.KeyEvent evt) {                                    
        if (editTabs.getTabCount() == 0) {
            return;
        }
        String filePath;
        if (filePaths.get(editTabs.getSelectedIndex()).equals("notSet")) {
            saveChooser.showSaveDialog(this);
            if (saveChooser.getSelectedFile() == null)
                return;
            filePath = saveChooser.getSelectedFile().getPath();
            editTabs.setTitleAt(editTabs.getSelectedIndex(), saveChooser.getSelectedFile().getName());
            filePaths.set(editTabs.getSelectedIndex(), filePath);
        } else {
            filePath = filePaths.get(editTabs.getSelectedIndex());
            editTabs.setTitleAt(editTabs.getSelectedIndex(), saveChooser.getSelectedFile().getName());
        }
        javax.swing.JTextArea textComp = (javax.swing.JTextArea) editTabs.getSelectedComponent();
        String text = textComp.getText();
        text = text.replaceAll("(?!\\r)\\n", "\r\n");
        try {
            Files.write(Paths.get(filePath), text.getBytes());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }                                   

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if (editTabs.getTabCount() == 0)
            return;
        int index = editTabs.getSelectedIndex();
        editTabs.remove(editTabs.getSelectedComponent());
        filePaths.remove(index);
    }                                        

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {                                       
        javax.swing.JTextArea newTextArea = new javax.swing.JTextArea();
        newTextArea.setAutoscrolls(true);
        newTextArea.setLineWrap(true);
        filePaths.add("notSet");
        editTabs.addTab("Untitled-" + editTabs.getTabCount(), newTextArea);
    }                                      

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        if (editTabs.getTabCount() == 0) {
            return;
        }
        String filePath;
        if (filePaths.get(editTabs.getSelectedIndex()).equals("notSet")) {
            int result = saveChooser.showSaveDialog(this);
            if(result == JFileChooser.CANCEL_OPTION)
                return;
            if (saveChooser.getSelectedFile() == null)
                return;
            filePath = saveChooser.getSelectedFile().getPath();
            editTabs.setTitleAt(editTabs.getSelectedIndex(), saveChooser.getSelectedFile().getName());
            filePaths.set(editTabs.getSelectedIndex(), filePath);
        } else {
            filePath = filePaths.get(editTabs.getSelectedIndex());
            editTabs.setTitleAt(editTabs.getSelectedIndex(), saveChooser.getSelectedFile().getName());
        }
        javax.swing.JTextArea textComp = (javax.swing.JTextArea) editTabs.getSelectedComponent();
        String text = textComp.getText();
        text = text.replaceAll("(?!\\r)\\n", "\r\n");
        try {
            Files.write(Paths.get(filePath), text.getBytes());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }                                       

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {                                        
        javax.swing.JTextArea newTextArea = new javax.swing.JTextArea();
        newTextArea.setAutoscrolls(true);
        newTextArea.setLineWrap(true);
        filePaths.add("notSet");
        editTabs.addTab("Untitled-" + editTabs.getTabCount(), newTextArea);
    }                                       

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if (editTabs.getTabCount() == 0) {
            return;
        }
        String filePath;
        if (filePaths.get(editTabs.getSelectedIndex()).equals("notSet")) {
            int result = saveChooser.showSaveDialog(this);
            if(result == JFileChooser.CANCEL_OPTION)
                return;
            if (saveChooser.getSelectedFile() == null)
                return;
            filePath = saveChooser.getSelectedFile().getPath();
            editTabs.setTitleAt(editTabs.getSelectedIndex(), saveChooser.getSelectedFile().getName());
            filePaths.set(editTabs.getSelectedIndex(), filePath);
        } else {
            filePath = filePaths.get(editTabs.getSelectedIndex());
            editTabs.setTitleAt(editTabs.getSelectedIndex(), saveChooser.getSelectedFile().getName());
        }
        javax.swing.JTextArea textComp = (javax.swing.JTextArea) editTabs.getSelectedComponent();
        String text = textComp.getText();
        text = text.replaceAll("(?!\\r)\\n", "\r\n");
        try {
            Files.write(Paths.get(filePath), text.getBytes());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }                                        

    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        openChooser.setFileFilter(filter);
        openChooser.showOpenDialog(saveBtn);
        if (openChooser.getSelectedFile() == null)
            return;
        String text = "";
        try {
            for (String line : Files.readAllLines(Paths.get(openChooser.getSelectedFile().getPath()))) {
                text += line + "\n";
            }
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        filePaths.add(openChooser.getSelectedFile().getPath());
        javax.swing.JTextArea newTextArea = new javax.swing.JTextArea(text);
        newTextArea.setAutoscrolls(true);
        newTextArea.setLineWrap(true);
        editTabs.addTab(openChooser.getSelectedFile().getName(), newTextArea);
    }                                       

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });/*
        if (args.length != 0){
            String text = "";
            try {
                for (String line : Files.readAllLines(Paths.get(args[0]))) {
                    text += line + "\n";
                }
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            filePaths.add(args[0]);
            javax.swing.JTextArea newTextArea = new javax.swing.JTextArea(text);
            newTextArea.setAutoscrolls(true);
            newTextArea.setLineWrap(true);
            editTabs.addTab(args[0].split("\\")[args[0].split("\\").length - 1], newTextArea);
        }/**/
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton closeBtn;
    private javax.swing.JTabbedPane editTabs;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton newBtn;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JButton openBtn;
    private javax.swing.JFileChooser openChooser;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JButton saveBtn;
    private javax.swing.JFileChooser saveChooser;
    private javax.swing.JMenuItem saveMenu;
    // End of variables declaration                   
}
